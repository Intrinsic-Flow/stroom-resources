user  nginx;

worker_processes  1;

events {
    worker_connections  1024;
}

http {
    include logging.conf;

    ####################
    # Upstream servers #
    ####################

    upstream auth_service_upstream_sticky {
        ip_hash; 
        server <<<AUTH_SERVICE_HOST>>>:<<<AUTH_SERVICE_PORT>>>;
    }

    upstream stroom_upstream_sticky {
        ip_hash;
        server <<<STROOM_HOST>>>:<<<STROOM_PORT>>>;
    }

    upstream stroom_upstream {
        server <<<STROOM_HOST>>>:<<<STROOM_PORT>>>;
    }

    upstream stroom_proxy_upstream {
        server <<<STROOM_PROXY_HOST>>>:<<<STROOM_PROXY_PORT>>>;
    }

    upstream auth_ui_upstream {
        server <<<AUTH_UI_URL>>>;
    }

    index index.html index.htm;

    # Re-direct all http to https
    server {
        listen 80 default_server;
        server_name _;
        return 301 https://$host$request_uri;
    }

    server {
       
        include server.conf;
        ########################
        # ROUTING FOR SERVICES #
        ########################

        location /api/auth/ {
            include location_defaults.conf;
            proxy_pass http://auth_service_upstream_sticky/;
        }

        location /api/ {
            include location_defaults.conf;
            proxy_pass http://stroom_upstream/api/;
        }


        # datafeed direct into stroom with no prxoy aggregation
        location /stroom/datafeeddirect/ {
           proxy_pass http://stroom_upstream/stroom/datafeed/;
           include proxy_location_defaults.conf;
        }

        # datafeed direct into stroom with no prxoy aggregation (exact match)
        location = /stroom/datafeeddirect {
            proxy_pass http://stroom_upstream/stroom/datafeed/;
            include proxy_location_defaults.conf;
        }

        # datafeed into proxy
        location /stroom/datafeed/ {
            proxy_pass http://stroom_proxy_upstream/stroom/datafeed/;
            include proxy_location_defaults.conf;
        }

        # datafeed into proxy (exact match)
        location = /stroom/datafeed {
            proxy_pass http://stroom_proxy_upstream/stroom/datafeed/;
            include proxy_location_defaults.conf;
        }


        ##################
        # ROUTING FOR UI #
        ##################

        ## ROUTING FOR STROOM

        # This is an exact match that directs '/stroom' to the Stroom UI...
        location ~ /stroom$ {
             return 302 https://<<<NGINX_ADVERTISED_HOST>>>/stroom/ui;
        }

        location ~ .*/clustercall.rpc$ {
            deny all;
        }

        # ... and everything else gets reverse-proxied to stroom.
        location /stroom {
            proxy_pass http://<<<STROOM_HOST>>>:<<<STROOM_PORT>>>/stroom;
            include location_defaults.conf;
        }

        ## ROUTING FOR OTHER UI

        # TODO: We don't really want this path. Auth has several responsibilities.
        # Some of them are mapped to more helpful locations, as above, but really 
        # should be non-root. E.g. passwordReset is root, so we need this location.
        location /authui {
            proxy_pass https://auth_ui_upstream;
        }


        # The following routes mount stroom-ui onto this server. These paths catch 
        # everything that should go to the UI.

        # This allows stroom-ui to get its config.
        location /config.json {
          proxy_pass https://auth_ui_upstream/config.json;
        }

        # This allows stroom-ui to get its assets, e.g. css and images.
        location /static {
          proxy_pass https://auth_ui_upstream/static;
        }

        # This is the path where all non-chrome pages are hosted,
        # i.e. all the normal functionality but without the chrome (navigation, footer).
        location /s {
          include location_defaults.conf;
          proxy_pass https://auth_ui_upstream/s;
        }

        # The following should catch websocket requests (wss:) but it doesn't seem to work.
        # location / {
        #   proxy_pass https://auth_ui_upstream/;
        #   proxy_http_version 1.1;
        #   proxy_set_header Upgrade $http_upgrade;
        #   proxy_set_header Connection "upgrade"; 
        # }
    }
}
