name: CI Build

on:
  push:
    #branches: [ master ]
  pull_request:
    #branches: [ master ]

jobs:
  build-project:
    runs-on: ubuntu-20.04
    env:
      # Static env vars

    steps:

      - name: Checkout code
        id: checkout_code
        uses: actions/checkout@v2

      - name: Set Environment Variables
        id: set_env_var
        run: |

          # Set variables in github's env file which are then read into each subsequent step
          {
            # Map the GITHUB env vars to our own
            echo "BUILD_DIR=${GITHUB_WORKSPACE}"
            echo "BUILD_COMMIT=${GITHUB_SHA}"

            if [[ ${GITHUB_REF} =~ ^refs/tags/ ]]; then
              # strip off the 'refs/tags/' bit
              tag="${GITHUB_REF#refs/tags/}"
              echo "BUILD_TAG=${tag}"
            fi

            if [[ ${GITHUB_REF} =~ ^refs/heads/ ]]; then
              # strip off the 'ref/heads/' bit
              echo "BUILD_BRANCH=${GITHUB_REF#refs/heads/}"
            fi

            if [[ ${GITHUB_REF} =~ ^refs/pulls/ ]]; then
              echo "BUILD_IS_PULL_REQUEST=true"
            else
              echo "BUILD_IS_PULL_REQUEST=false"
            fi
          } >> $GITHUB_ENV

      - name: Build Environment Info
        id: build_info
        run: |
          echo "docker version:           [$(docker --version)]"
          echo "docker-compose version:   [$(docker-compose --version)]"
          echo "git version:              [$(git --version)]"
          echo "GITHUB_WORKSPACE:         [$GITHUB_WORKSPACE]"
          echo "GITHUB_REF:               [$GITHUB_REF]"
          echo "GITHUB_SHA:               [$GITHUB_SHA]"
          echo "BUILD_DIR:                [$BUILD_DIR]"
          echo "BUILD_TAG:                [$BUILD_TAG]"
          echo "BUILD_BRANCH:             [$BUILD_BRANCH]"
          echo "BUILD_COMMIT:             [$BUILD_COMMIT]"
          echo "BUILD_IS_PULL_REQUEST:    [$BUILD_IS_PULL_REQUEST]"
          echo "PWD:                      [$PWD]"
          echo "HOME:                     [$HOME]"

      - name: Run full build
        id: run_build
        env:
          # Docker creds for dockerhub authenticated push/pull
          # Manually added secrets
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
        run: |
          pushd "${BUILD_DIR}" > /dev/null
          echo -e "${GREEN}Running ${BLUE}ci_build.sh${NC}"
          ./ci_build.sh
          echo -e "${GREEN}Finished running build script${NC}"

      - name: Release to GitHub
        id: create_release
        if: ${{ startsWith(env.BUILD_TAG, 'v') }}
        env:
          # Github provided secret
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Use Github's hub CLI to create our release
          # See https://github.com/github/hub
          set -x
          args=()
          for asset_file in $BUILD_DIR/release_artefacts/*; do
            echo "Found asset file: $asset_file}"
            args+=("--attach" "${asset_file}")
          done

          if [[ ${GITHUB_REF} =~ .*(beta|alpha).* ]]; then
            echo "Release is a pre-release"
            args+=("--prerelease")
          fi
          echo "Creating release with assets"
          # hub release create "${args[@]}" -m "$BUILD_TAG" "$BUILD_TAG"
          # Assuming the release text will come from the tag?

          hub release create "${args[@]}" "$BUILD_TAG"
          echo "Release created"

      - name: Update gh-pages
        id: update_gh-pages
        if: ${{ startsWith(env.BUILD_TAG, 'v') }}
        env:
          # Github personal access token, manually added to secrets
          GITHUB_TOKEN: ${{ secrets.DEPLOY_TOKEN }}
        run: |
          "${GITHUB_WORKSPACE}/update_gh_pages.sh"

      #- name: Create Release
        #id: create_release
        #if: ${{ startsWith(env.BUILD_TAG, "v") }}
        #uses: actions/create-release@v1
        #env:
          ## Provided by default by github
          #GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        #with:
          #tag_name: ${{ github.ref }}
          #release_name: $BUILD_TAG
          #draft: false
          #prerelease: $BUILD_IS_PRERELEASE

      #- name: Upload Release Asset
        #id: upload-release-asset 
        #if: ${{ startsWith(env.BUILD_TAG, "v") }}
        #uses: actions/upload-release-asset@v1
        #env:
          ## Provided by default by github
          #GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        #with:
          #upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          #asset_path: ./my-artifact.zip
          #asset_name: my-artifact.zip
          #asset_content_type: application/zip


